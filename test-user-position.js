const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { getUsers, getUserById } = require('./database/firebase');

async function testUserPosition() {
  try {
    console.log('üß™ Testando posi√ß√£o do usu√°rio...');
    
    // Simular um usu√°rio logado
    const testUserId = 1; // aluno001
    const user = await getUserById(testUserId);
    
    if (!user) {
      console.log('‚ùå Usu√°rio n√£o encontrado');
      return;
    }
    
    console.log(`‚úÖ Usu√°rio encontrado: ${user.login}`);
    console.log(`üìä XP atual: ${user.xp_atual}`);
    console.log(`üìà N√≠vel calculado: ${Math.floor(user.xp_atual / 50) + 1}`);
    
    // Buscar todos os usu√°rios
    const allUsers = await getUsers();
    const usersArray = Object.values(allUsers || {});
    
    console.log(`üìã Total de usu√°rios: ${usersArray.length}`);
    
    // Ordenar usu√°rios por XP (maior para menor)
    const rankingGeral = usersArray
      .filter(u => u.xp_atual !== undefined)
      .sort((a, b) => (b.xp_atual || 0) - (a.xp_atual || 0));
    
    // Encontrar posi√ß√£o do usu√°rio
    const posicao = rankingGeral.findIndex(u => u.id === user.id) + 1;
    
    console.log(`üèÜ Posi√ß√£o no ranking: #${posicao} de ${rankingGeral.length}`);
    
    // Mostrar top 5 do ranking
    console.log('\nüìä Top 5 do Ranking:');
    rankingGeral.slice(0, 5).forEach((u, index) => {
      console.log(`  ${index + 1}. ${u.login} - ${u.xp_atual} XP`);
    });
    
    console.log('\nüéâ Teste conclu√≠do com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  testUserPosition();
}

module.exports = { testUserPosition }; 