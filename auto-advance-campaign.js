const { getCampanhaConfig, updateCampanhaConfig } = require('./database/firebase');

// Fun√ß√£o para obter data atual no fuso hor√°rio de Bras√≠lia
function getBrasiliaTime() {
  const now = new Date();
  const brasiliaTime = new Date(now.toLocaleString("en-US", {timeZone: "America/Sao_Paulo"}));
  return brasiliaTime;
}

// Fun√ß√£o para calcular o dia atual baseado na data real
function calculateCurrentDay(dataInicio, duracaoDias) {
  const brasiliaTime = getBrasiliaTime();
  const dataInicioDate = new Date(dataInicio);
  
  // Calcular diferen√ßa em dias
  const diffTime = brasiliaTime.getTime() - dataInicioDate.getTime();
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
  
  // Se ainda n√£o come√ßou a campanha
  if (diffDays < 0) {
    return 0;
  }
  
  // Se a campanha j√° terminou
  if (diffDays >= duracaoDias) {
    return duracaoDias;
  }
  
  // Dia atual da campanha (1-based)
  return diffDays + 1;
}

async function autoAdvanceCampaign() {
  try {
    console.log('üïõ [AUTO-ADVANCE] Verificando dia atual da campanha...');
    
    // Obter hora atual em Bras√≠lia
    const brasiliaTime = getBrasiliaTime();
    console.log(`üåç [AUTO-ADVANCE] Hora atual em Bras√≠lia: ${brasiliaTime.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`);
    
    // Buscar configura√ß√£o atual
    const currentConfig = await getCampanhaConfig();
    
    if (!currentConfig) {
      console.log('‚ùå [AUTO-ADVANCE] Nenhuma campanha configurada encontrada');
      return;
    }
    
    console.log('üìã [AUTO-ADVANCE] Configura√ß√£o atual:');
    console.log(`  - Data in√≠cio: ${currentConfig.data_inicio}`);
    console.log(`  - Dura√ß√£o: ${currentConfig.duracao_dias} dias`);
    console.log(`  - Dia atual: ${currentConfig.current_day || 'N√£o definido'}`);
    console.log(`  - Ativa: ${currentConfig.ativa}`);
    
    // Verificar se a campanha est√° ativa (se n√£o estiver definida, considerar como ativa)
    const isActive = currentConfig.ativa !== false; // Se undefined ou true, considerar ativa
    if (!isActive) {
      console.log('‚ö†Ô∏è [AUTO-ADVANCE] Campanha n√£o est√° ativa');
      return;
    }
    
    // Calcular dia atual baseado na data real
    const calculatedDay = calculateCurrentDay(currentConfig.data_inicio, currentConfig.duracao_dias);
    const currentDay = currentConfig.current_day || 0;
    
    console.log(`üìÖ [AUTO-ADVANCE] Data in√≠cio: ${new Date(currentConfig.data_inicio).toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`);
    console.log(`üìÖ [AUTO-ADVANCE] Data atual: ${brasiliaTime.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`);
    console.log(`üìÖ [AUTO-ADVANCE] Dia calculado: ${calculatedDay}`);
    console.log(`üìÖ [AUTO-ADVANCE] Dia atual na config: ${currentDay}`);
    
    // Sempre atualizar para o dia calculado (mais confi√°vel)
    if (calculatedDay !== currentDay) {
      console.log(`üîÑ [AUTO-ADVANCE] Atualizando dia de ${currentDay} para ${calculatedDay}`);
      
      // Atualizar configura√ß√£o
      const updatedConfig = {
        ...currentConfig,
        current_day: calculatedDay,
        last_updated: brasiliaTime.toISOString()
      };
      
      await updateCampanhaConfig(updatedConfig);
      
      console.log(`‚úÖ [AUTO-ADVANCE] Dia atualizado!`);
      console.log(`üìä [AUTO-ADVANCE] Novo dia: ${calculatedDay}/${currentConfig.duracao_dias}`);
      
      // Mostrar status da campanha
      if (calculatedDay === 0) {
        console.log('‚è≥ [AUTO-ADVANCE] Campanha ainda n√£o come√ßou');
      } else if (calculatedDay > currentConfig.duracao_dias) {
        console.log('üèÅ [AUTO-ADVANCE] Campanha j√° terminou');
      } else {
        console.log('üéØ [AUTO-ADVANCE] Campanha em andamento');
        console.log('\nüéØ [AUTO-ADVANCE] Desafios dispon√≠veis:');
        for (let day = 1; day <= calculatedDay; day++) {
          console.log(`  - Dia ${day}: Dispon√≠vel`);
        }
      }
      
    } else {
      console.log('‚úÖ [AUTO-ADVANCE] Dia j√° est√° correto');
    }
    
  } catch (error) {
    console.error('‚ùå [AUTO-ADVANCE] Erro ao verificar dia atual:', error);
  }
}

// Fun√ß√£o para executar verifica√ß√£o peri√≥dica
async function startAutoAdvance() {
  console.log('ü§ñ [AUTO-ADVANCE] Iniciando verifica√ß√£o autom√°tica do dia da campanha...');
  console.log('‚è∞ [AUTO-ADVANCE] Verificando a cada 5 minutos no hor√°rio de Bras√≠lia...');
  
  // Verificar imediatamente
  await autoAdvanceCampaign();
  
  // Verificar a cada 5 minutos
  setInterval(async () => {
    const brasiliaTime = getBrasiliaTime();
    console.log(`üïê [AUTO-ADVANCE] Verifica√ß√£o autom√°tica: ${brasiliaTime.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`);
    
    // Sempre verificar e atualizar o dia
    await autoAdvanceCampaign();
    
  }, 5 * 60 * 1000); // Verificar a cada 5 minutos
}

// Fun√ß√£o para iniciar o sistema autom√°tico (exportada para o servidor)
function startAutoAdvanceCampaign() {
  startAutoAdvance();
}

// Executar se chamado diretamente
if (require.main === module) {
  const command = process.argv[2];
  
  if (command === 'start') {
    startAutoAdvance();
  } else {
    autoAdvanceCampaign();
  }
}

module.exports = { autoAdvanceCampaign, startAutoAdvance, startAutoAdvanceCampaign, calculateCurrentDay }; 