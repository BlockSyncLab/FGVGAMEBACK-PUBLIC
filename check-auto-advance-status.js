const { getCampanhaConfig } = require('./database/firebase');

async function checkAutoAdvanceStatus() {
  try {
    console.log('üîç Verificando status do sistema auto-advance...');
    console.log('=' .repeat(50));
    
    // Verificar configura√ß√£o atual
    const config = await getCampanhaConfig();
    
    if (!config) {
      console.log('‚ùå Nenhuma campanha configurada encontrada');
      return;
    }
    
    console.log('üìã Configura√ß√£o atual:');
    console.log(`  - Data in√≠cio: ${config.data_inicio}`);
    console.log(`  - Dura√ß√£o: ${config.duracao_dias} dias`);
    console.log(`  - Dia atual: ${config.current_day || 'N√£o definido'}`);
    console.log(`  - Ativa: ${config.ativa}`);
    console.log(`  - √öltima atualiza√ß√£o: ${config.last_updated || 'Nunca'}`);
    
    // Calcular dia esperado
    const dataInicio = new Date(config.data_inicio);
    const dataAtual = new Date();
    const diffTime = dataAtual.getTime() - dataInicio.getTime();
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    const expectedDay = diffDays + 1;
    
    console.log('\nüìÖ C√°lculo manual:');
    console.log(`  - Data in√≠cio: ${dataInicio.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`);
    console.log(`  - Data atual: ${dataAtual.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`);
    console.log(`  - Dias desde in√≠cio: ${diffDays}`);
    console.log(`  - Dia esperado: ${expectedDay}`);
    console.log(`  - Dia configurado: ${config.current_day || 'N√£o definido'}`);
    
    // Verificar se est√° correto
    if (config.current_day === expectedDay) {
      console.log('\n‚úÖ Sistema funcionando corretamente!');
      console.log('   - Dia configurado est√° correto');
    } else if (!config.current_day) {
      console.log('\n‚ö†Ô∏è Sistema n√£o est√° atualizando automaticamente');
      console.log('   - current_day n√£o est√° definido');
      console.log('   - Verifique se o sistema auto-advance est√° rodando');
    } else {
      console.log('\n‚ùå Sistema com problema!');
      console.log(`   - Dia configurado: ${config.current_day}`);
      console.log(`   - Dia esperado: ${expectedDay}`);
      console.log('   - Diferen√ßa:', Math.abs(config.current_day - expectedDay), 'dias');
    }
    
    // Verificar √∫ltima atualiza√ß√£o
    if (config.last_updated) {
      const lastUpdate = new Date(config.last_updated);
      const now = new Date();
      const timeDiff = now.getTime() - lastUpdate.getTime();
      const minutesDiff = Math.floor(timeDiff / (1000 * 60));
      
      console.log('\n‚è∞ √öltima atualiza√ß√£o:');
      console.log(`  - Timestamp: ${config.last_updated}`);
      console.log(`  - Tempo atr√°s: ${minutesDiff} minutos`);
      
      if (minutesDiff > 10) {
        console.log('‚ö†Ô∏è Sistema pode n√£o estar rodando (√∫ltima atualiza√ß√£o h√° mais de 10 minutos)');
      } else {
        console.log('‚úÖ Sistema parece estar ativo');
      }
    } else {
      console.log('\n‚ö†Ô∏è Nunca foi atualizado automaticamente');
    }
    
    console.log('\nüí° Para for√ßar atualiza√ß√£o:');
    console.log('   node force-advance-campaign.js');
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar status:', error);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  checkAutoAdvanceStatus().then(() => {
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
    process.exit(0);
  }).catch((error) => {
    console.error('‚ùå Erro:', error);
    process.exit(1);
  });
}

module.exports = { checkAutoAdvanceStatus }; 